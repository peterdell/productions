;  cartstart - start selected cartridge
;
;  Copyright (C) 2013-2014 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.macro WTVBI
	LDA 20
WTVBIL	CMP 20
	BEQ WTVBIL
	.endm

CARTSTART
	LDA #$77
	STA CRUNADR
	LDA #$E4
	STA CRUNADR+1
	JMP RUNCART_INT

; called by entry point ENTRY_RUNCART
; A=mode, X=banklo, Y=bankhi, C=lockflag
RUNCART_EXT
	PHP
	PHA
	LDA #$77
	STA CRUNADR
	LDA #$E4
	STA CRUNADR+1
	PLA
	PLP

; called by entry point ENTRY_RUNCART_ADR
; A=mode, X=banklo, Y=bankhi, C=lockflag
; $E0/E1 
RUNCART_EXT_ADR
	STA MODE
	STX BANK
	STY BANK+1
	LDX #0
	BCC RUNEXT1
	INX
RUNEXT1	STX LOCKCFG

; start cartridge from settings in MODE and BANK
RUNCART_INT

.if .def HWDEBUG
	DBGCLEAR
	DBGADR 0, BANK
	LDX #4
	LDA MODE
	DBGA
	LDX #6
	LDA LOCKCFG
	DBGA
.endif

	LDA #0
	STA 559
	JSR W20
	SEI
	LDA #0
	STA $D40E
	LDX #$FF
	TXS

; default: secondary bank disabled, writes disabled, main bank enabled
	LDA #0
	STA CFG
	STA BANK2
	STA BANK2+1
	STA ENABLE2
	LDA #1
	STA ENABLE

	LDA MODE
	CMP #TC_MODE_OFF
	BNE GO1
	LDA #0
	STA ENABLE
	JMP GO99

GO1
	CMP #MODE_8K_THECART
	BNE GO2
; map to 8k mode and disable lockflag
	LDA #TC_MODE_8K
	STA MODE
	LDA #0
	STA LOCKCFG
	JMP GO99

GO2
	CMP #MODE_8K_RIGHT
	BNE GO3
	LDA BANK
	STA BANK2
	LDA BANK+1
	STA BANK2+1
	LDA #0
	STA ENABLE
	STA BANK
	STA BANK+1
	LDA #1
	STA ENABLE2
	LDA #TC_MODE_FLEXI
	STA MODE
	JMP GO99

GO3
	CMP #MODE_PICODOS
	BNE GO4
	JMP RUNMYPD

GO4
	CMP #MODE_FLASHER
	BNE GO5
	JMP RUNFLASHER

GO5

GO99
	LDA #0
	LDX #RUNCFGL-1
GOC2	LDA RUNCFG,X
	STA EXEC,X
	DEX
	BPL GOC2

	JMP EXEC

RUNCFG
	LDA BANK
	STA TC_BANKLO
	LDA BANK+1
	STA TC_BANKHI
	LDA ENABLE
	STA TC_ENABLE
	LDA BANK2
	STA TC_BANK2LO
	LDA BANK2+1
	STA TC_BANK2HI
	LDA ENABLE2
	STA TC_ENABLE2

	LDA CFG
	STA TC_CFG

	LDA MODE
	STA TC_MODE
	CMP #TC_MODE_OSS
	BNE RUNC1
	STA OSSBANK1
RUNC1	CMP #TC_MODE_SDX64
	BNE RUNC2
	STA SDX64_BANKCTL+7
RUNC2	CMP #TC_MODE_DIAMOND64
	BNE RUNC3
	STA DIAMOND64_BANKCTL+7
RUNC3	CMP #TC_MODE_EXPRESS64
	BNE RUNC4
	STA EXPRESS64_BANKCTL+7
RUNC4	CMP #TC_MODE_SIC
	BNE RUNC5
	LDX #0
	STX SIC_BANKCTL
RUNC5	LDA LOCKCFG
	BEQ RUNC6
	STA TC_LOCKCFG

RUNC6
	JMP (CRUNADR)

RUNCFGL	= * - RUNCFG

; clear memory starting from CLRSTART
CLRSTART = $0400

; disable basic, setup RAMTOP and clear RAM from CLRSTART to RAMTOP
CLRMEM
	LDA $D301
	ORA #2
	STA $D301
	LDA #$C0
	STA 106
	STA 740
	LDA #1
	STA 1016

; copy code to RAM and execute it
	LDX #0
CLRMEMCPL
	LDA CLRMEMRAM,X
	STA EXECS,X
	INX
	CPX #CLRMEMRAML
	BNE CLRMEMCPL
	JMP EXECS

CLRMEMRAM
	LDA TC_MODE
	PHA
	LDA #TC_MODE_OFF
	STA TC_MODE
	LDX #[$C0->CLRSTART]
	LDA $BFFF
	EOR #$FF
	STA $BFFF
	CMP $BFFF
	BEQ CLRMEMRAM1
	LDA #$A0
	STA 106
	STA 740
	LDA #0
	STA 1016
	LDX #[$A0->CLRSTART]
CLRMEMRAM1
	LDA #0
	TAY
CLRMEMRAMLP
; self modifying code, address of high byte in RAM
CLRHIABS = * + 2 - CLRMEMRAM + EXECS

	STA CLRSTART,Y
	INY
	BNE CLRMEMRAMLP
	INC CLRHIABS
	DEX
	BNE CLRMEMRAMLP
	PLA
	STA TC_MODE
	RTS
CLRMEMRAML	= * - CLRMEMRAM

; copy X pages from $8000 to DSTADR
COPYROMPAGES
	LDA #0
	STA SRCADR
	LDA #$80
	STA SRCADR+1
; copy X pages from SRCADR to DSTADR
COPYPAGES
	LDY #0
COPYPAGEL
	LDA (SRCADR),Y
	STA (DSTADR),Y
	INY
	BNE COPYPAGEL
	INC SRCADR+1
	INC DSTADR+1
	DEX
	BNE COPYPAGEL
	RTS

; copy X bytes of init code from SRCADR to stack exec area and run it
COPYRUNINIT
	LDY #0
COPYRUNINITL
	LDA (SRCADR),Y
	STA EXECS,Y
	INY
	DEX
	BNE COPYRUNINITL
	JMP EXECS

; start MyPicoDos
RUNMYPD
	JSR CLRMEM

; bank in mypicodos code at $8000
	LDA #<TC_PICODOS_BANK
	STA TC_BANK2LO
	LDA #>TC_PICODOS_BANK
	STA TC_BANK2HI
	LDA #TC_MODE_FLEXI
	STA TC_MODE
	LDA #1
	STA TC_ENABLE2

; copy mypicodos code to RAM
	LDA #<MYPDOS_START
	STA DSTADR
	LDA #>MYPDOS_START
	STA DSTADR+1
	LDX #MYPDOS_PAGES
	JSR COPYROMPAGES

; copy init code to RAM and start it
	LDA #<MYPDOS_INIT
	STA SRCADR
	LDA #>MYPDOS_INIT
	STA SRCADR+1
	LDX #MYPDOS_INIT_LEN
	JMP COPYRUNINIT

MYPDOS_INIT
	LDA #TC_MODE_OFF
	STA TC_MODE
	LDA #0
	STA TC_CFG
	LDA $D013
	STA $3FA

	CLI
	LDA #$40
	STA $D40E

	CLOSE 0
	OPEN 0,12,0,MYPDOS_INIT_EDITOR
	WTVBI
	JMP MYPDOS_START
MYPDOS_INIT_EDITOR = * - MYPDOS_INIT + EXECS
	.BYTE "E:", 155
MYPDOS_INIT_LEN = * - MYPDOS_INIT

; copy mydos code to RAM
COPYMYDOS
; bank in mypdos code at $8000
	LDA #<TC_MYDOS_BANK
	STA TC_BANK2LO
	LDA #>TC_MYDOS_BANK
	STA TC_BANK2HI
	LDA #TC_MODE_FLEXI
	STA TC_MODE
	LDA #1
	STA TC_ENABLE2

; copy boot sector code to $0700
	LDA #<MYDOS_BOOTSEC_START
	STA DSTADR
	LDA #>MYDOS_BOOTSEC_START
	STA DSTADR+1
	LDX #2
	JSR COPYROMPAGES

; copy DOSSYS code to MYDOS_DOSSYS_START
	LDA #<[MYDOS_DOSSYS - $A000 + $8000]
	STA SRCADR
	LDA #>[MYDOS_DOSSYS - $A000 + $8000]
	STA SRCADR+1
	LDA #<MYDOS_DOSSYS_START
	STA DSTADR
	LDA #>MYDOS_DOSSYS_START
	STA DSTADR+1
	LDX #MYDOS_DOSSYS_PAGES
	JSR COPYPAGES

; setup BOOT and DOSINI
	LDA #1
	STA 9
	LDA #<MYDOS_DOSINI
	STA $C
	LDA #>MYDOS_DOSINI
	STA $D
.if 0
	LDA #<MYDOS_DOSVEC
	STA $A
	LDA #>MYDOS_DOSVEC
	STA $B
.endif
	LDA #0
	STA 580
	RTS

; patch mydos to use the highspeed SIO code of the flasher

MYDOS_SIO1	= $07AC
MYDOS_SIO2	= $0B35
MYDOS_SIO3	= $0B97

MYDOS_DOSVEC_HI = $1A7A
MYDOS_DOSVEC_LO = $1A7E

PATCH_MYDOS_HISIO
	LDA #<FLASHER_HISIO
	STA MYDOS_SIO1+1
	STA MYDOS_SIO2+1
	STA MYDOS_SIO3+1
	LDA #>FLASHER_HISIO
	STA MYDOS_SIO1+2
	STA MYDOS_SIO2+2
	STA MYDOS_SIO3+2
	LDA #1
	STA 580

; patch dosvec to be set up with E477
	LDA #$E4
	STA MYDOS_DOSVEC_HI
	LDA #$77
	STA MYDOS_DOSVEC_LO
	RTS

; copy flasher code to RAM
COPYFLASHER
; bank in first bank of flasher code at $8000
	LDA #<TC_FLASH_BANK1
	STA TC_BANK2LO
	LDA #>TC_FLASH_BANK1
	STA TC_BANK2HI
	LDA #TC_MODE_FLEXI
	STA TC_MODE
	LDA #1
	STA TC_ENABLE2

; copy first 8k of flasher code
	LDA #<FLASHER_START
	STA DSTADR
	LDA #>FLASHER_START
	STA DSTADR+1
	LDX #32
	JSR COPYROMPAGES

; bank in second bank of flasher code at $8000
	LDA #<TC_FLASH_BANK2
	STA TC_BANK2LO
	LDA #>TC_FLASH_BANK2
	STA TC_BANK2HI

; copy remainder of flasher code
	LDA #<[FLASHER_START + $2000]
	STA DSTADR
	LDA #>[FLASHER_START + $2000]
	STA DSTADR+1
	LDX #[FLASHCODE_PAGES - 32]
	JSR COPYROMPAGES
	RTS

; start flasher
RUNFLASHER
	JSR CLRMEM
	JSR COPYMYDOS
	JSR COPYFLASHER
	JSR PATCH_MYDOS_HISIO

; copy init code to RAM and start it
	LDA #<FLASHER_INIT
	STA SRCADR
	LDA #>FLASHER_INIT
	STA SRCADR+1
	LDX #FLASHER_INIT_LEN
	JMP COPYRUNINIT

FLASHER_INIT
	LDA #TC_MODE_OFF
	STA TC_MODE
	LDA #0
	STA TC_CFG
	LDA $D013
	STA $3FA

	CLI
	LDA #$40
	STA $D40E

	CLOSE 0
	OPEN 0,12,0,FLASHER_INIT_EDITOR
	WTVBI
	JSR MYDOS_DOSINI
	JMP FLASHER_RUN

FLASHER_INIT_EDITOR = * - FLASHER_INIT + EXECS
	.BYTE "E:", 155
FLASHER_INIT_LEN = * - FLASHER_INIT

