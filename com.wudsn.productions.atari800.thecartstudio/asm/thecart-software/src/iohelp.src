;  iohelp - various I/O helper routines
;
;  Copyright (C) 2004-2010 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

; returns Z=1: yes, Z=0: no, N=1: abort
YESNO	JSR GETCHAR
	CPY #128
	BEQ ?YBRK
	CMP #'Y
	BEQ ?YYES
	CMP #'y
	BEQ ?YYES
	CMP #'N
	BEQ ?YNO
	CMP #'n
	BEQ ?YNO
	JMP YESNO
?YNO	LDX #1
?YYES	PHP
	JSR PUTCHAR
	PLP
	RTS

?YBRK	LDY #$FF
	RTS	; return with N=1

; input filename
GETFN	INPUT 0, FNBUF
	BPL ?GETFN1
?GETFN0 LDA #$FF
	RTS

?GETFN1	LDA FNBUF
	CMP #155
	BEQ ?GETFN0
	LDX #0
?GETFN2	LDA FNBUF,X
	CMP #':
	BEQ ?GETFNOK
	CMP #155
	BEQ ?GETFN3
	INX
	BPL ?GETFN2

?GETFNX	LDA #$FF
	RTS

?GETFN3	LDA FNBUF,X
	STA FNBUF+2,X
	DEX
	BPL ?GETFN3
	LDA #'D
	STA FNBUF
	LDA #':
	STA FNBUF+1
?GETFNOK	LDA #0
	RTS

FNBUF	.DC 128 0

GR0	CLOSE 0
	OPEN 0,12,0,EDITOR
	LDA 20
?WVBI	CMP 20
	BEQ ?WVBI
	RTS

EDITOR	.BYTE "E:",155

PUTCHAR	TAY
	LDA $E407
	PHA
	LDA $E406
	PHA
	TYA
	RTS

GETCHAR	LDA $E425
	PHA
	LDA $E424
	PHA
	RTS

?PHEX	PHA
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA HEXTAB,X
	ORA ?PINV
	JSR PUTCHAR
	PLA
	AND #$0F
	TAX
	LDA HEXTAB,X
	ORA ?PINV
	JMP PUTCHAR

; output A as hex value
PUTHEX	PHA
	LDA #0
	STA ?PINV
	PLA
	JMP ?PHEX

; output A as hex value (inverse characters)
PUTHEXI	PHA
	LDA #$80
	STA ?PINV
	PLA
	JMP ?PHEX

?PINV	.BYTE 0

HEXTAB  .BYTE "0123456789ABCDEF"

; print OK/ERROR depending on N flag
PSTAT	BMI PERROR

POK	PRINT 0, OKT
	RTS

PERROR	PRINT 0, ERRT
	RTS

; print "drive X not responding"
PNODISK
	BPUT0 TNODSK1
	LDX DUNIT
	LDY #0
	JSR PRDEC
	BPUT0 TNODSK2
	RTS

; print "error reading drive X"
PREADERR
	BPUT0 TREADERR
	LDX DUNIT
	LDY #0
	JSR PRDEC
	LDA #155
	JSR PUTCHAR
	RTS

OKT	.BYTE " OK", 155
ERRT	.BYTE " ERROR", 155

; print decimal number in X/Y without leading zeroes
PRDEC	STX NUMBIN
	STY NUMBIN+1
	LDA #2		; decimal mode, strip leading zeroes
	STA NUMMOD
	JSR ITOA
	LDX #0
PRDEC1	LDA NUMASC,X
	CMP #155
	BEQ PRDEC2
	STX NUMBIN
	JSR PUTCHAR
	LDX NUMBIN
	INX
	CPX #5
	BNE PRDEC1
PRDEC2	RTS

; print decimal number in X/Y without leading zeroes, inverted
PRDECI	STX NUMBIN
	STY NUMBIN+1
	LDA #2		; decimal mode, strip leading zeroes
	STA NUMMOD
	JSR ITOA
	LDX #0
PRDECI1	LDA NUMASC,X
	CMP #155
	BEQ PRDECI2
	STX NUMBIN
	ORA #$80
	JSR PUTCHAR
	LDX NUMBIN
	INX
	CPX #5
	BNE PRDECI1
PRDECI2	RTS

; input decimal number
; result: C=0: OK X=lo Y=hi
;         C=1: error
GETDEC	INPUT0L NUMASC
	BPL GETDEC1
GETDECX	SEC
	RTS

GETDEC1	JSR ATOI
	BCS GETDECX
	LDX NUMBIN
	LDY NUMBIN+1
	RTS

; convert 8k banknumber to address:
; in: bank in ADRTMP, ADRTMP+1
; out: address bytes in ADRTMP..ADRTMP+3

BNK2ADR
; multiply by 65536, divide by 8
	LDA ADRTMP
	STA ADRTMP+2
	LDA ADRTMP+1
	STA ADRTMP+3
	LDA #0
	STA ADRTMP
	STA ADRTMP+1

	LSR ADRTMP+3
	ROR ADRTMP+2
	ROR ADRTMP+1

	LSR ADRTMP+3
	ROR ADRTMP+2
	ROR ADRTMP+1

	LSR ADRTMP+3
	ROR ADRTMP+2
	ROR ADRTMP+1

	RTS

; convert address to 8k bank number
; in: address in ADRTMP..ADRTMP+3
; out: bank in ADRTMP, ADRTMP+1

; multiply by 8, divide by 65536

ADR2BNK	
	ASL ADRTMP+1
	ROL ADRTMP+2
	ROL ADRTMP+3

	ASL ADRTMP+1
	ROL ADRTMP+2
	ROL ADRTMP+3

	ASL ADRTMP+1
	ROL ADRTMP+2
	ROL ADRTMP+3

	LDA ADRTMP+2
	STA ADRTMP
	LDA ADRTMP+3
	STA ADRTMP+1
	RTS

ADRTMP	.BYTE 0,0,0,0
