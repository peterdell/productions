;  diag - TheCart diagnostics
;
;  Copyright (C) 2005-2014 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.include "cio.inc"
	.include "libflash.inc"
	.include "flash.inc"
	.include "flashdef.inc"

CFIBUF	= DATABUF
TMPBUF	= DATABUF + $1000

	.BANK
	* = START

FLASHMAIN
	JSR INIT

MAINLP	BPUT0 TTITLE
	JSR FINIT
	JSR FENABLE
	JSR FDETECT
	JSR FDISABLE

	LDA FTYPE
	JSR PFTYPE
	LDA FTYPE
	CMP #TNOFLSH
	BNE MOK

	JSR GETCHAR
	CPY #128
	BNE MAINLP

EXIT	JSR CLEANUP
	JMP ($A)

MOK
; setup variables for old (raw) flasher code
	FCOPY4 FSIZE,SIZE
	LDA #1
	STA NUMCHIP
	STA NEEDERAS

; setup SIZEB
	JSR SETSIZEB

	LDA #155
	JSR PUTCHAR

	BPUT0 TMENU
MENULP	JSR GETCHAR
	CPY #128
	BNE ?MENUL1
	JMP MAINLP
?MENUL1
	CMP #'Q
	BNE NOQ

	JSR PRSEL
	BPUT0 TASKQUIT
	JSR YESNO
	PHP
	LDA #155
	JSR PUTCHAR
	PLP

	BEQ ?DOEXIT
	JMP MAINLP
?DOEXIT
	JMP EXIT

NOQ
	CMP #'1		; show device id
	BNE NO1

	JSR PRSEL

	JSR SHOWID

MAINCONT
	BPUT0 TCONT
	JSR GETCHAR
	JMP MAINLP

NO1
	CMP #'2		; show lock status bits
	BNE NO2

	JSR PRSEL
	JSR SHOWLOCK
	JMP MAINCONT

NO2
	CMP #'3		; show sector protection status
	BNE NO3

	JSR PRSEL
	JSR SHOWPROT
	JMP MAINCONT

NO3
	CMP #'4		; protect block
	BNE NO4

	JSR PRSEL
	JSR PROTBLK
	JMP MAINCONT

NO4
	CMP #'5		; clear block protection
	BNE NO5

	JSR PRSEL
	JSR PROTCLR
	JMP MAINCONT

NO5
	CMP #'6		; erase block
	BNE NO6

	JSR PRSEL
	JSR ERASEBLK
	JMP MAINCONT

NO6
	CMP #'7		; erase block timing test
	BNE NO7

	JSR PRSEL
	JSR ERASETIM
	JMP MAINCONT

NO7
	CMP #'8		; erase flash
	BNE NO8

	JSR PRSEL
	JSR ERASECHP
	JMP MAINCONT

NO8
	JMP MENULP

; send entry signature, mode in A
	.macro SIGENTRY ; mode
	LDA #0
	STA BANKREG
	STA BANKREG+1
	LDA #$AA
	STA BANKBAS+$AAA
	LDA #$55
	STA BANKBAS+$555
	LDA #%1
	STA BANKBAS+$AAA
	.endm

; send exit signature
	.macro SIGEXIT
	LDA #0
	STA BANKREG
	STA BANKREG+1
	LDA #$90
	STA BANKBAS
	LDA #0
	STA BANKBAS
	.endm

; send reset signature
	.macro SIGRESET
	LDA #0
	STA BANKREG
	STA BANKREG+1
	LDA #$F0
	STA BANKBAS
	.endm

SHOWLOCK
	JSR FENABLE

	SIGENTRY $40
	LDA BANKBAS
	PHA
	SIGEXIT
	JSR FDISABLE

	BPUT0 TLOCKST
	PLA
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR
	RTS

SHOWID
	JSR FENABLE


; enter autoselect mode
	SIGENTRY $90
	LDA BANKBAS
	STA TMPBUF
	LDA BANKBAS+2
	STA TMPBUF+1
	LDA BANKBAS+$1C
	STA TMPBUF+2
	LDA BANKBAS+$1E
	STA TMPBUF+3

; read CFI data
	LDA #$98
	STA BANKBAS+$AA
	LDX #0
SHOWID1	LDA BANKBAS,X
	STA CFIBUF,X
	INX
	BNE SHOWID1
	SIGRESET

	JSR FDISABLE

	BPUT0 TCHPID

	LDA TMPBUF
	JSR PUTHEX
	LDA #32
	JSR PUTCHAR

	LDA TMPBUF+1
	JSR PUTHEX
	LDA #32
	JSR PUTCHAR

	LDA TMPBUF+2
	JSR PUTHEX
	LDA #32
	JSR PUTCHAR

	LDA TMPBUF+3
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR

	LDA CFIBUF+$20
	CMP #'Q
	BEQ SHOWCFI1

SHOWCFI0
	BPUT0 TNOCFI
	RTS

SHOWCFI1
	LDA CFIBUF+$22
	CMP #'R
	BNE SHOWCFI0
	LDA CFIBUF+$24
	CMP #'Y
	BNE SHOWCFI0

	BPUT0 TCFIBE
	LDX CFIBUF+$42
	LDY CFIBUF+$4A
	JSR PUTHEX2

	BPUT0 TCFICE
	LDX CFIBUF+$44
	LDY CFIBUF+$4C
	JSR PUTHEX2

	RTS

; output hex values in X and Y, then return
PUTHEX2	TYA
	PHA
	TXA
	JSR PUTHEX
	LDA #32
	JSR PUTCHAR
	PLA
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR
	RTS

; print block number
PRBLK
	LDA BLOCKNO
	STA NUMBIN
	LDA BLOCKNO+1
	STA NUMBIN+1
	LDA #0
	STA NUMMOD
	JSR ITOA

; convert leading zeroes to spaces
	LDX #0
PRDEC51	LDA NUMASC,X
	CMP #'0
	BNE PRDEC52
	LDA #32
	STA NUMASC,X
	INX
	CPX #4
	BNE PRDEC51
PRDEC52
	BPUT0L NUMASC,5
	RTS


SHOWPROT
	LDA #0
	STA BLOCKNO
	STA BLOCKNO+1
SPROTL	LDA BLOCKNO+1
	CMP SIZEB+1
	BNE SPROTL1
	LDA BLOCKNO
	CMP SIZEB
	BNE SPROTL1
	RTS

SPROTL1
	JSR FENABLE
	SIGENTRY $90
	LDA BLOCKNO
	STA BANKREG
	LDA BLOCKNO+1
	STA BANKREG+1
	LDA BANKBAS+4
	PHA
	SIGRESET
	JSR FDISABLE

	PLA
	BEQ SPROTL2
	PHA
	JSR PRBLK
	LDA #32
	JSR PUTCHAR
	LDA #':
	JSR PUTCHAR
	LDA #32
	JSR PUTCHAR
	PLA
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR

SPROTL2
	CLC
	LDA BLOCKNO
	ADC #16
	STA BLOCKNO
	BCC SPROTL3
	INC BLOCKNO+1
SPROTL3
	JMP SPROTL

; input bank number, store in BLOCKNO
; returns N=1 on error
INPBANK
	BPUT0 TBANKNO
	LDX SIZEB
	LDY SIZEB+1
	DEX
	CPX #$FF
	BNE INPBNK1
	DEY
INPBNK1
	JSR PRDEC
	BPUT0 TBANKNO2

        JSR GETDEC
        BCC INPBNK11
        JMP INPBNKX
INPBNK11
        STX RSBANK
        STY RSBANK+1

        CPY SIZEB+1
        BCC INPBNK3
        BEQ INPBNK2
        JMP INPBNKX
INPBNK2 CPX SIZEB
        BCC INPBNK3
        JMP INPBNKX
INPBNK3
	STX BLOCKNO
	STY BLOCKNO+1
	LDY #0
	RTS
INPBNKX	LDY #$FF
	RTS

; toggle bit for block protection
PROTTOGGLE
	LDA BANKBAS
	STA FLASHTMP
	LDA BANKBAS
	STA FLASHTMP+1
	EOR FLASHTMP
	AND #$40
	BEQ TOGGLEOK

	LDA FLASHTMP+1
	AND #$20
	BEQ PROTTOGGLE

	LDA BANKBAS
	EOR BANKBAS
	AND #$40
	BEQ TOGGLEOK

	LDY #$FF
	RTS

TOGGLEOK
	CLC
	LDA 20
	ADC #2
TWT20	CMP 20
	BNE TWT20

	LDY #0
	RTS

PROTBLK
	JSR INPBANK
	BPL PROTBLK1
	RTS

PROTBLK1
	JSR FENABLE

	SIGENTRY $C0
	LDA BLOCKNO
	STA BANKREG
	LDA BLOCKNO+1
	STA BANKREG+1

	LDA #$A0
	STA BANKBAS
	LDA #0
	STA BANKBAS
	STA BANKREG
	STA BANKREG+1

	JSR PROTTOGGLE

	SIGEXIT
	JSR FDISABLE

	RTS

PROTCLR
	BPUT0 TREALLY
	JSR YESNO
	PHP
	LDA #155
	JSR PUTCHAR
	PLP
	BEQ PROTCLR1
	RTS

PROTCLR1
	JSR FENABLE

	SIGENTRY $C0

	LDA #$80
	STA BANKBAS
	LDA #$30
	STA BANKBAS

	JSR PROTTOGGLE

	SIGEXIT
	JSR FDISABLE

	RTS

; wait until VBI is over
WTSCR	LDA $D40B
	CMP #$30
	BNE WTSCR
	RTS

; reset time to zero
CLRTIME	JSR WTSCR
	LDA #0
	STA 18
	STA 19
	STA 20
	RTS

; save time
SAVTIME	JSR WTSCR
	LDA 20
	STA JIFFIE
	LDA 19
	STA JIFFIE+1
	LDA 18
	STA JIFFIE+2
	RTS

; print time
PRTTIME	BPUT0 TJIFFI
	LDA JIFFIE+2
	JSR PUTHEX
	LDA JIFFIE+1
	JSR PUTHEX
	LDA JIFFIE
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR
	RTS

; erase flash
ERASECHP
	BPUT0 TREALLY
	JSR YESNO
	PHP
	LDA #155
	JSR PUTCHAR
	PLP
	BEQ ERASECHP1
	RTS

ERASECHP1
	JSR FADRZERO
	JSR FENABLE
	JSR CLRTIME
	JSR FCERAS
	PHP
	JSR SAVTIME
	JSR FDISABLE
	PLP
	JSR PSTAT
	JSR PRTTIME
	RTS

; internal erase block function
ERBLK
	LDA BLOCKNO
	STA ADRTMP
	LDA BLOCKNO+1
	STA ADRTMP+1
	JSR BNK2ADR
	LDA ADRTMP
	STA FLASHADR
	LDA ADRTMP+1
	STA FLASHADR+1
	LDA ADRTMP+2
	STA FLASHADR+2
	LDA ADRTMP+3
	STA FLASHADR+3

	JSR FENABLE
	JSR CLRTIME
	JSR FPERAS
	PHP
	JSR SAVTIME
	JSR FDISABLE
	PLP
	RTS

; erase flash block
ERASEBLK
	JSR INPBANK
	BPL ERASEBLK1
	RTS

ERASEBLK1
	JSR ERBLK
	JSR PSTAT
	JSR PRTTIME
	RTS

; block erase timing test
ERASETIM
	BPUT0 TJIFFT

        JSR GETDEC
        BCC ERASET2
ERASET1	RTS
ERASET2
	CPY #0
	BNE ERASET1
	STX JIFFTHR

	LDA #0
	STA BLOCKNO
	STA BLOCKNO+1
ERTLP	LDA BLOCKNO+1
	CMP SIZEB+1
	BNE ERTL1
	LDA BLOCKNO
	CMP SIZEB
	BNE ERTL1
	RTS

ERTL1	JSR ERBLK
	BPL ERTL2
	JSR PRBLK
	JSR PERROR
	JMP ERTLNX

ERTL2	LDA JIFFIE+2
	BNE ERTL3
	LDA JIFFIE+1
	BNE ERTL3
	LDA JIFFIE
	CMP JIFFTHR
	BCC ERTLNX

ERTL3	JSR PRBLK
	LDA #32
	JSR PUTCHAR
	JSR PRTTIME

ERTLNX	
	CLC
	LDA BLOCKNO
	ADC #16
	STA BLOCKNO
	BCC ERTL4
	INC BLOCKNO+1
ERTL4
	JMP ERTLP

; print menu selection
PRSEL	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR
	LDA #155
	JMP PUTCHAR

INIT	LDA 106
	STA M106
	LDA 740
	STA M740
	LDA #$A0
	STA 106
	STA 740
	JSR GR0

	LDA $D301
	STA MD301
	ORA #2
	STA $D301
	RTS

CLEANUP	LDA MD301
	STA $D301
	LDA M106
	STA 106
	LDA M740
	STA 740
	JMP GR0

M106	.BYTE 0
M740	.BYTE 0
MD301	.BYTE 0

; jiffie count for operation
JIFFIE	.DC 3 0

; jiffie threshold
JIFFTHR	.BYTE 0

;	.include "flashio.src"
	.include "flashutil.src"
;	.include "flashincr.src"
;	.include "flashraw.src"
	.include "diagtext.src"

	.include "libflash.src"
	.include "cio.src"
DUNIT   = $0301

	.include "iohelp.src"
	.include "iohelpfl.src"
	.include "numhelp.src"

;	.include "flashtest.src"

	.include "flashdata.src"
	.include "libflash-ramloc.src"

.if .not .def FLASH_BIN
	.BANK
	* = $2E0
	.WORD START
.endif

